
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Leads
 */

export type Leads = {
  id: number
  firstName: string
  lastName: string
  email: string
  workPhone: string | null
  jobTitle: string | null
  organization: string | null
  webSite: string | null
  orgSize: string | null
  industry: string | null
  leadSource: string | null
  content: string
  userId: number | null
}

/**
 * Model Solution
 */

export type Solution = {
  id: number
  solution: string
  leadsId: number | null
}

/**
 * Model Subscribe
 */

export type Subscribe = {
  id: number
  email: string
  active: boolean
  userId: number | null
}

/**
 * Model Account
 */

export type Account = {
  id: number
  compoundId: string
  userId: number
  providerType: string
  providerId: string
  providerAccountId: string
  refreshToken: string | null
  accessToken: string | null
  accessTokenExpires: Date | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Session
 */

export type Session = {
  id: number
  userId: number
  expires: Date
  sessionToken: string
  accessToken: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 */

export type User = {
  id: number
  name: string | null
  email: string | null
  emailVerified: Date | null
  image: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model VerificationRequest
 */

export type VerificationRequest = {
  id: number
  identifier: string
  token: string
  expires: Date
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Leads
 * const leads = await prisma.leads.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Leads
   * const leads = await prisma.leads.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.leads`: Exposes CRUD operations for the **Leads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.leads.findMany()
    * ```
    */
  get leads(): Prisma.LeadsDelegate;

  /**
   * `prisma.solution`: Exposes CRUD operations for the **Solution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Solutions
    * const solutions = await prisma.solution.findMany()
    * ```
    */
  get solution(): Prisma.SolutionDelegate;

  /**
   * `prisma.subscribe`: Exposes CRUD operations for the **Subscribe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscribes
    * const subscribes = await prisma.subscribe.findMany()
    * ```
    */
  get subscribe(): Prisma.SubscribeDelegate;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.verificationRequest`: Exposes CRUD operations for the **VerificationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationRequests
    * const verificationRequests = await prisma.verificationRequest.findMany()
    * ```
    */
  get verificationRequest(): Prisma.VerificationRequestDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Leads: 'Leads',
    Solution: 'Solution',
    Subscribe: 'Subscribe',
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationRequest: 'VerificationRequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Leads
   */


  export type AggregateLeads = {
    count: number | null
    avg: LeadsAvgAggregateOutputType | null
    sum: LeadsSumAggregateOutputType | null
    min: LeadsMinAggregateOutputType | null
    max: LeadsMaxAggregateOutputType | null
  }

  export type LeadsAvgAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type LeadsSumAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type LeadsMinAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    workPhone: string | null
    jobTitle: string | null
    organization: string | null
    webSite: string | null
    orgSize: string | null
    industry: string | null
    leadSource: string | null
    content: string | null
    userId: number | null
  }

  export type LeadsMaxAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    workPhone: string | null
    jobTitle: string | null
    organization: string | null
    webSite: string | null
    orgSize: string | null
    industry: string | null
    leadSource: string | null
    content: string | null
    userId: number | null
  }

  export type LeadsCountAggregateOutputType = {
    id: number
    firstName: number | null
    lastName: number | null
    email: number | null
    workPhone: number | null
    jobTitle: number | null
    organization: number | null
    webSite: number | null
    orgSize: number | null
    industry: number | null
    leadSource: number | null
    content: number | null
    userId: number | null
    _all: number
  }


  export type LeadsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LeadsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LeadsMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    workPhone?: true
    jobTitle?: true
    organization?: true
    webSite?: true
    orgSize?: true
    industry?: true
    leadSource?: true
    content?: true
    userId?: true
  }

  export type LeadsMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    workPhone?: true
    jobTitle?: true
    organization?: true
    webSite?: true
    orgSize?: true
    industry?: true
    leadSource?: true
    content?: true
    userId?: true
  }

  export type LeadsCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    workPhone?: true
    jobTitle?: true
    organization?: true
    webSite?: true
    orgSize?: true
    industry?: true
    leadSource?: true
    content?: true
    userId?: true
    _all?: true
  }

  export type AggregateLeadsArgs = {
    /**
     * Filter which Leads to aggregate.
    **/
    where?: LeadsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leads to fetch.
    **/
    orderBy?: Enumerable<LeadsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LeadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LeadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LeadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LeadsMaxAggregateInputType
  }

  export type GetLeadsAggregateType<T extends AggregateLeadsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetLeadsAggregateScalarType<T[P]>
  }

  export type GetLeadsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof LeadsAvgAggregateOutputType ? LeadsAvgAggregateOutputType[P] : never
  }

    



  export type LeadsSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    workPhone?: boolean
    jobTitle?: boolean
    organization?: boolean
    webSite?: boolean
    orgSize?: boolean
    industry?: boolean
    solutionType?: boolean | FindManySolutionArgs
    leadSource?: boolean
    content?: boolean
    User?: boolean | UserArgs
    userId?: boolean
  }

  export type LeadsInclude = {
    solutionType?: boolean | FindManySolutionArgs
    User?: boolean | UserArgs
  }

  export type LeadsGetPayload<
    S extends boolean | null | undefined | LeadsArgs,
    U = keyof S
      > = S extends true
        ? Leads
    : S extends undefined
    ? never
    : S extends LeadsArgs | FindManyLeadsArgs
    ?'include' extends U
    ? Leads  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'solutionType'
        ? Array < SolutionGetPayload<S['include'][P]>>  :
        P extends 'User'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Leads ?Leads [P]
  : 
          P extends 'solutionType'
        ? Array < SolutionGetPayload<S['select'][P]>>  :
        P extends 'User'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Leads
  : Leads


  export interface LeadsDelegate {
    /**
     * Find zero or one Leads that matches the filter.
     * @param {FindUniqueLeadsArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueLeadsArgs>(
      args: Subset<T, FindUniqueLeadsArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads | null>, Prisma__LeadsClient<LeadsGetPayload<T> | null>>

    /**
     * Find the first Leads that matches the filter.
     * @param {FindFirstLeadsArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstLeadsArgs>(
      args?: Subset<T, FindFirstLeadsArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads | null>, Prisma__LeadsClient<LeadsGetPayload<T> | null>>

    /**
     * Find zero or more Leads that matches the filter.
     * @param {FindManyLeadsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.leads.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.leads.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadsWithIdOnly = await prisma.leads.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyLeadsArgs>(
      args?: Subset<T, FindManyLeadsArgs>
    ): CheckSelect<T, Promise<Array<Leads>>, Promise<Array<LeadsGetPayload<T>>>>

    /**
     * Create a Leads.
     * @param {LeadsCreateArgs} args - Arguments to create a Leads.
     * @example
     * // Create one Leads
     * const Leads = await prisma.leads.create({
     *   data: {
     *     // ... data to create a Leads
     *   }
     * })
     * 
    **/
    create<T extends LeadsCreateArgs>(
      args: Subset<T, LeadsCreateArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads>, Prisma__LeadsClient<LeadsGetPayload<T>>>

    /**
     * Delete a Leads.
     * @param {LeadsDeleteArgs} args - Arguments to delete one Leads.
     * @example
     * // Delete one Leads
     * const Leads = await prisma.leads.delete({
     *   where: {
     *     // ... filter to delete one Leads
     *   }
     * })
     * 
    **/
    delete<T extends LeadsDeleteArgs>(
      args: Subset<T, LeadsDeleteArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads>, Prisma__LeadsClient<LeadsGetPayload<T>>>

    /**
     * Update one Leads.
     * @param {LeadsUpdateArgs} args - Arguments to update one Leads.
     * @example
     * // Update one Leads
     * const leads = await prisma.leads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LeadsUpdateArgs>(
      args: Subset<T, LeadsUpdateArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads>, Prisma__LeadsClient<LeadsGetPayload<T>>>

    /**
     * Delete zero or more Leads.
     * @param {LeadsDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.leads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LeadsDeleteManyArgs>(
      args?: Subset<T, LeadsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Leads.
     * @param {LeadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const leads = await prisma.leads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LeadsUpdateManyArgs>(
      args: Subset<T, LeadsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Leads.
     * @param {LeadsUpsertArgs} args - Arguments to update or create a Leads.
     * @example
     * // Update or create a Leads
     * const leads = await prisma.leads.upsert({
     *   create: {
     *     // ... data to create a Leads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leads we want to update
     *   }
     * })
    **/
    upsert<T extends LeadsUpsertArgs>(
      args: Subset<T, LeadsUpsertArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads>, Prisma__LeadsClient<LeadsGetPayload<T>>>

    /**
     * Find zero or one Leads that matches the filter.
     * @param {FindUniqueLeadsArgs} args - Arguments to find a Leads
     * @deprecated This will be deprecated please use prisma.leads.findUnique
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueLeadsArgs>(
      args: Subset<T, FindUniqueLeadsArgs>
    ): CheckSelect<T, Prisma__LeadsClient<Leads | null>, Prisma__LeadsClient<LeadsGetPayload<T> | null>>

    /**
     * Count the number of Leads.
     * @param {FindManyLeadsArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.leads.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyLeadsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Leads.
     * @param {AggregateLeadsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateLeadsArgs>(args: Subset<T, AggregateLeadsArgs>): Promise<GetLeadsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Leads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LeadsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    solutionType<T extends FindManySolutionArgs = {}>(args?: Subset<T, FindManySolutionArgs>): CheckSelect<T, Promise<Array<Solution>>, Promise<Array<SolutionGetPayload<T>>>>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Leads findUnique
   */
  export type FindUniqueLeadsArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * Filter, which Leads to fetch.
    **/
    where: LeadsWhereUniqueInput
  }


  /**
   * Leads findFirst
   */
  export type FindFirstLeadsArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * Filter, which Leads to fetch.
    **/
    where?: LeadsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leads to fetch.
    **/
    orderBy?: Enumerable<LeadsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
    **/
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Leads.
    **/
    distinct?: Enumerable<LeadsScalarFieldEnum>
  }


  /**
   * Leads findMany
   */
  export type FindManyLeadsArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * Filter, which Leads to fetch.
    **/
    where?: LeadsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Leads to fetch.
    **/
    orderBy?: Enumerable<LeadsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
    **/
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
    **/
    skip?: number
    distinct?: Enumerable<LeadsScalarFieldEnum>
  }


  /**
   * Leads create
   */
  export type LeadsCreateArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * The data needed to create a Leads.
    **/
    data: LeadsCreateInput
  }


  /**
   * Leads update
   */
  export type LeadsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * The data needed to update a Leads.
    **/
    data: LeadsUpdateInput
    /**
     * Choose, which Leads to update.
    **/
    where: LeadsWhereUniqueInput
  }


  /**
   * Leads updateMany
   */
  export type LeadsUpdateManyArgs = {
    data: LeadsUpdateManyMutationInput
    where?: LeadsWhereInput
  }


  /**
   * Leads upsert
   */
  export type LeadsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * The filter to search for the Leads to update in case it exists.
    **/
    where: LeadsWhereUniqueInput
    /**
     * In case the Leads found by the `where` argument doesn't exist, create a new Leads with this data.
    **/
    create: LeadsCreateInput
    /**
     * In case the Leads was found with the provided `where` argument, update it with this data.
    **/
    update: LeadsUpdateInput
  }


  /**
   * Leads delete
   */
  export type LeadsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
    /**
     * Filter which Leads to delete.
    **/
    where: LeadsWhereUniqueInput
  }


  /**
   * Leads deleteMany
   */
  export type LeadsDeleteManyArgs = {
    where?: LeadsWhereInput
  }


  /**
   * Leads without action
   */
  export type LeadsArgs = {
    /**
     * Select specific fields to fetch from the Leads
    **/
    select?: LeadsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LeadsInclude | null
  }



  /**
   * Model Solution
   */


  export type AggregateSolution = {
    count: number | null
    avg: SolutionAvgAggregateOutputType | null
    sum: SolutionSumAggregateOutputType | null
    min: SolutionMinAggregateOutputType | null
    max: SolutionMaxAggregateOutputType | null
  }

  export type SolutionAvgAggregateOutputType = {
    id: number
    leadsId: number | null
  }

  export type SolutionSumAggregateOutputType = {
    id: number
    leadsId: number | null
  }

  export type SolutionMinAggregateOutputType = {
    id: number
    solution: string | null
    leadsId: number | null
  }

  export type SolutionMaxAggregateOutputType = {
    id: number
    solution: string | null
    leadsId: number | null
  }

  export type SolutionCountAggregateOutputType = {
    id: number
    solution: number | null
    leadsId: number | null
    _all: number
  }


  export type SolutionAvgAggregateInputType = {
    id?: true
    leadsId?: true
  }

  export type SolutionSumAggregateInputType = {
    id?: true
    leadsId?: true
  }

  export type SolutionMinAggregateInputType = {
    id?: true
    solution?: true
    leadsId?: true
  }

  export type SolutionMaxAggregateInputType = {
    id?: true
    solution?: true
    leadsId?: true
  }

  export type SolutionCountAggregateInputType = {
    id?: true
    solution?: true
    leadsId?: true
    _all?: true
  }

  export type AggregateSolutionArgs = {
    /**
     * Filter which Solution to aggregate.
    **/
    where?: SolutionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Solutions to fetch.
    **/
    orderBy?: Enumerable<SolutionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Solutions
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SolutionMaxAggregateInputType
  }

  export type GetSolutionAggregateType<T extends AggregateSolutionArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSolutionAggregateScalarType<T[P]>
  }

  export type GetSolutionAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof SolutionAvgAggregateOutputType ? SolutionAvgAggregateOutputType[P] : never
  }

    



  export type SolutionSelect = {
    id?: boolean
    solution?: boolean
    Leads?: boolean | LeadsArgs
    leadsId?: boolean
  }

  export type SolutionInclude = {
    Leads?: boolean | LeadsArgs
  }

  export type SolutionGetPayload<
    S extends boolean | null | undefined | SolutionArgs,
    U = keyof S
      > = S extends true
        ? Solution
    : S extends undefined
    ? never
    : S extends SolutionArgs | FindManySolutionArgs
    ?'include' extends U
    ? Solution  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Leads'
        ? LeadsGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Solution ?Solution [P]
  : 
          P extends 'Leads'
        ? LeadsGetPayload<S['select'][P]> | null : never
  } 
    : Solution
  : Solution


  export interface SolutionDelegate {
    /**
     * Find zero or one Solution that matches the filter.
     * @param {FindUniqueSolutionArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueSolutionArgs>(
      args: Subset<T, FindUniqueSolutionArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution | null>, Prisma__SolutionClient<SolutionGetPayload<T> | null>>

    /**
     * Find the first Solution that matches the filter.
     * @param {FindFirstSolutionArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstSolutionArgs>(
      args?: Subset<T, FindFirstSolutionArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution | null>, Prisma__SolutionClient<SolutionGetPayload<T> | null>>

    /**
     * Find zero or more Solutions that matches the filter.
     * @param {FindManySolutionArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Solutions
     * const solutions = await prisma.solution.findMany()
     * 
     * // Get first 10 Solutions
     * const solutions = await prisma.solution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solutionWithIdOnly = await prisma.solution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManySolutionArgs>(
      args?: Subset<T, FindManySolutionArgs>
    ): CheckSelect<T, Promise<Array<Solution>>, Promise<Array<SolutionGetPayload<T>>>>

    /**
     * Create a Solution.
     * @param {SolutionCreateArgs} args - Arguments to create a Solution.
     * @example
     * // Create one Solution
     * const Solution = await prisma.solution.create({
     *   data: {
     *     // ... data to create a Solution
     *   }
     * })
     * 
    **/
    create<T extends SolutionCreateArgs>(
      args: Subset<T, SolutionCreateArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Delete a Solution.
     * @param {SolutionDeleteArgs} args - Arguments to delete one Solution.
     * @example
     * // Delete one Solution
     * const Solution = await prisma.solution.delete({
     *   where: {
     *     // ... filter to delete one Solution
     *   }
     * })
     * 
    **/
    delete<T extends SolutionDeleteArgs>(
      args: Subset<T, SolutionDeleteArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Update one Solution.
     * @param {SolutionUpdateArgs} args - Arguments to update one Solution.
     * @example
     * // Update one Solution
     * const solution = await prisma.solution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SolutionUpdateArgs>(
      args: Subset<T, SolutionUpdateArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Delete zero or more Solutions.
     * @param {SolutionDeleteManyArgs} args - Arguments to filter Solutions to delete.
     * @example
     * // Delete a few Solutions
     * const { count } = await prisma.solution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SolutionDeleteManyArgs>(
      args?: Subset<T, SolutionDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Solutions.
     * @param {SolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Solutions
     * const solution = await prisma.solution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SolutionUpdateManyArgs>(
      args: Subset<T, SolutionUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Solution.
     * @param {SolutionUpsertArgs} args - Arguments to update or create a Solution.
     * @example
     * // Update or create a Solution
     * const solution = await prisma.solution.upsert({
     *   create: {
     *     // ... data to create a Solution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Solution we want to update
     *   }
     * })
    **/
    upsert<T extends SolutionUpsertArgs>(
      args: Subset<T, SolutionUpsertArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Find zero or one Solution that matches the filter.
     * @param {FindUniqueSolutionArgs} args - Arguments to find a Solution
     * @deprecated This will be deprecated please use prisma.solution.findUnique
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueSolutionArgs>(
      args: Subset<T, FindUniqueSolutionArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution | null>, Prisma__SolutionClient<SolutionGetPayload<T> | null>>

    /**
     * Count the number of Solutions.
     * @param {FindManySolutionArgs} args - Arguments to filter Solutions to count.
     * @example
     * // Count the number of Solutions
     * const count = await prisma.solution.count({
     *   where: {
     *     // ... the filter for the Solutions we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManySolutionArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Solution.
     * @param {AggregateSolutionArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateSolutionArgs>(args: Subset<T, AggregateSolutionArgs>): Promise<GetSolutionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Solution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SolutionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Leads<T extends LeadsArgs = {}>(args?: Subset<T, LeadsArgs>): CheckSelect<T, Prisma__LeadsClient<Leads | null>, Prisma__LeadsClient<LeadsGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Solution findUnique
   */
  export type FindUniqueSolutionArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * Filter, which Solution to fetch.
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution findFirst
   */
  export type FindFirstSolutionArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * Filter, which Solution to fetch.
    **/
    where?: SolutionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Solutions to fetch.
    **/
    orderBy?: Enumerable<SolutionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Solutions.
    **/
    distinct?: Enumerable<SolutionScalarFieldEnum>
  }


  /**
   * Solution findMany
   */
  export type FindManySolutionArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * Filter, which Solutions to fetch.
    **/
    where?: SolutionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Solutions to fetch.
    **/
    orderBy?: Enumerable<SolutionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Solutions.
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
    **/
    skip?: number
    distinct?: Enumerable<SolutionScalarFieldEnum>
  }


  /**
   * Solution create
   */
  export type SolutionCreateArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * The data needed to create a Solution.
    **/
    data: SolutionCreateInput
  }


  /**
   * Solution update
   */
  export type SolutionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * The data needed to update a Solution.
    **/
    data: SolutionUpdateInput
    /**
     * Choose, which Solution to update.
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution updateMany
   */
  export type SolutionUpdateManyArgs = {
    data: SolutionUpdateManyMutationInput
    where?: SolutionWhereInput
  }


  /**
   * Solution upsert
   */
  export type SolutionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * The filter to search for the Solution to update in case it exists.
    **/
    where: SolutionWhereUniqueInput
    /**
     * In case the Solution found by the `where` argument doesn't exist, create a new Solution with this data.
    **/
    create: SolutionCreateInput
    /**
     * In case the Solution was found with the provided `where` argument, update it with this data.
    **/
    update: SolutionUpdateInput
  }


  /**
   * Solution delete
   */
  export type SolutionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
    /**
     * Filter which Solution to delete.
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution deleteMany
   */
  export type SolutionDeleteManyArgs = {
    where?: SolutionWhereInput
  }


  /**
   * Solution without action
   */
  export type SolutionArgs = {
    /**
     * Select specific fields to fetch from the Solution
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SolutionInclude | null
  }



  /**
   * Model Subscribe
   */


  export type AggregateSubscribe = {
    count: number | null
    avg: SubscribeAvgAggregateOutputType | null
    sum: SubscribeSumAggregateOutputType | null
    min: SubscribeMinAggregateOutputType | null
    max: SubscribeMaxAggregateOutputType | null
  }

  export type SubscribeAvgAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type SubscribeSumAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type SubscribeMinAggregateOutputType = {
    id: number
    email: string | null
    active: boolean | null
    userId: number | null
  }

  export type SubscribeMaxAggregateOutputType = {
    id: number
    email: string | null
    active: boolean | null
    userId: number | null
  }

  export type SubscribeCountAggregateOutputType = {
    id: number
    email: number | null
    active: number | null
    userId: number | null
    _all: number
  }


  export type SubscribeAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SubscribeSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SubscribeMinAggregateInputType = {
    id?: true
    email?: true
    active?: true
    userId?: true
  }

  export type SubscribeMaxAggregateInputType = {
    id?: true
    email?: true
    active?: true
    userId?: true
  }

  export type SubscribeCountAggregateInputType = {
    id?: true
    email?: true
    active?: true
    userId?: true
    _all?: true
  }

  export type AggregateSubscribeArgs = {
    /**
     * Filter which Subscribe to aggregate.
    **/
    where?: SubscribeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Subscribes to fetch.
    **/
    orderBy?: Enumerable<SubscribeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscribes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SubscribeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SubscribeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SubscribeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SubscribeMaxAggregateInputType
  }

  export type GetSubscribeAggregateType<T extends AggregateSubscribeArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSubscribeAggregateScalarType<T[P]>
  }

  export type GetSubscribeAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof SubscribeAvgAggregateOutputType ? SubscribeAvgAggregateOutputType[P] : never
  }

    



  export type SubscribeSelect = {
    id?: boolean
    email?: boolean
    active?: boolean
    User?: boolean | UserArgs
    userId?: boolean
  }

  export type SubscribeInclude = {
    User?: boolean | UserArgs
  }

  export type SubscribeGetPayload<
    S extends boolean | null | undefined | SubscribeArgs,
    U = keyof S
      > = S extends true
        ? Subscribe
    : S extends undefined
    ? never
    : S extends SubscribeArgs | FindManySubscribeArgs
    ?'include' extends U
    ? Subscribe  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Subscribe ?Subscribe [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Subscribe
  : Subscribe


  export interface SubscribeDelegate {
    /**
     * Find zero or one Subscribe that matches the filter.
     * @param {FindUniqueSubscribeArgs} args - Arguments to find a Subscribe
     * @example
     * // Get one Subscribe
     * const subscribe = await prisma.subscribe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueSubscribeArgs>(
      args: Subset<T, FindUniqueSubscribeArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe | null>, Prisma__SubscribeClient<SubscribeGetPayload<T> | null>>

    /**
     * Find the first Subscribe that matches the filter.
     * @param {FindFirstSubscribeArgs} args - Arguments to find a Subscribe
     * @example
     * // Get one Subscribe
     * const subscribe = await prisma.subscribe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstSubscribeArgs>(
      args?: Subset<T, FindFirstSubscribeArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe | null>, Prisma__SubscribeClient<SubscribeGetPayload<T> | null>>

    /**
     * Find zero or more Subscribes that matches the filter.
     * @param {FindManySubscribeArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscribes
     * const subscribes = await prisma.subscribe.findMany()
     * 
     * // Get first 10 Subscribes
     * const subscribes = await prisma.subscribe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscribeWithIdOnly = await prisma.subscribe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManySubscribeArgs>(
      args?: Subset<T, FindManySubscribeArgs>
    ): CheckSelect<T, Promise<Array<Subscribe>>, Promise<Array<SubscribeGetPayload<T>>>>

    /**
     * Create a Subscribe.
     * @param {SubscribeCreateArgs} args - Arguments to create a Subscribe.
     * @example
     * // Create one Subscribe
     * const Subscribe = await prisma.subscribe.create({
     *   data: {
     *     // ... data to create a Subscribe
     *   }
     * })
     * 
    **/
    create<T extends SubscribeCreateArgs>(
      args: Subset<T, SubscribeCreateArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe>, Prisma__SubscribeClient<SubscribeGetPayload<T>>>

    /**
     * Delete a Subscribe.
     * @param {SubscribeDeleteArgs} args - Arguments to delete one Subscribe.
     * @example
     * // Delete one Subscribe
     * const Subscribe = await prisma.subscribe.delete({
     *   where: {
     *     // ... filter to delete one Subscribe
     *   }
     * })
     * 
    **/
    delete<T extends SubscribeDeleteArgs>(
      args: Subset<T, SubscribeDeleteArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe>, Prisma__SubscribeClient<SubscribeGetPayload<T>>>

    /**
     * Update one Subscribe.
     * @param {SubscribeUpdateArgs} args - Arguments to update one Subscribe.
     * @example
     * // Update one Subscribe
     * const subscribe = await prisma.subscribe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscribeUpdateArgs>(
      args: Subset<T, SubscribeUpdateArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe>, Prisma__SubscribeClient<SubscribeGetPayload<T>>>

    /**
     * Delete zero or more Subscribes.
     * @param {SubscribeDeleteManyArgs} args - Arguments to filter Subscribes to delete.
     * @example
     * // Delete a few Subscribes
     * const { count } = await prisma.subscribe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscribeDeleteManyArgs>(
      args?: Subset<T, SubscribeDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Subscribes.
     * @param {SubscribeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscribes
     * const subscribe = await prisma.subscribe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscribeUpdateManyArgs>(
      args: Subset<T, SubscribeUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Subscribe.
     * @param {SubscribeUpsertArgs} args - Arguments to update or create a Subscribe.
     * @example
     * // Update or create a Subscribe
     * const subscribe = await prisma.subscribe.upsert({
     *   create: {
     *     // ... data to create a Subscribe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscribe we want to update
     *   }
     * })
    **/
    upsert<T extends SubscribeUpsertArgs>(
      args: Subset<T, SubscribeUpsertArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe>, Prisma__SubscribeClient<SubscribeGetPayload<T>>>

    /**
     * Find zero or one Subscribe that matches the filter.
     * @param {FindUniqueSubscribeArgs} args - Arguments to find a Subscribe
     * @deprecated This will be deprecated please use prisma.subscribe.findUnique
     * @example
     * // Get one Subscribe
     * const subscribe = await prisma.subscribe.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueSubscribeArgs>(
      args: Subset<T, FindUniqueSubscribeArgs>
    ): CheckSelect<T, Prisma__SubscribeClient<Subscribe | null>, Prisma__SubscribeClient<SubscribeGetPayload<T> | null>>

    /**
     * Count the number of Subscribes.
     * @param {FindManySubscribeArgs} args - Arguments to filter Subscribes to count.
     * @example
     * // Count the number of Subscribes
     * const count = await prisma.subscribe.count({
     *   where: {
     *     // ... the filter for the Subscribes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManySubscribeArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Subscribe.
     * @param {AggregateSubscribeArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateSubscribeArgs>(args: Subset<T, AggregateSubscribeArgs>): Promise<GetSubscribeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscribe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubscribeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Subscribe findUnique
   */
  export type FindUniqueSubscribeArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * Filter, which Subscribe to fetch.
    **/
    where: SubscribeWhereUniqueInput
  }


  /**
   * Subscribe findFirst
   */
  export type FindFirstSubscribeArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * Filter, which Subscribe to fetch.
    **/
    where?: SubscribeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Subscribes to fetch.
    **/
    orderBy?: Enumerable<SubscribeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscribes.
    **/
    cursor?: SubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Subscribes.
    **/
    distinct?: Enumerable<SubscribeScalarFieldEnum>
  }


  /**
   * Subscribe findMany
   */
  export type FindManySubscribeArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * Filter, which Subscribes to fetch.
    **/
    where?: SubscribeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Subscribes to fetch.
    **/
    orderBy?: Enumerable<SubscribeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscribes.
    **/
    cursor?: SubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribes.
    **/
    skip?: number
    distinct?: Enumerable<SubscribeScalarFieldEnum>
  }


  /**
   * Subscribe create
   */
  export type SubscribeCreateArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * The data needed to create a Subscribe.
    **/
    data: SubscribeCreateInput
  }


  /**
   * Subscribe update
   */
  export type SubscribeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * The data needed to update a Subscribe.
    **/
    data: SubscribeUpdateInput
    /**
     * Choose, which Subscribe to update.
    **/
    where: SubscribeWhereUniqueInput
  }


  /**
   * Subscribe updateMany
   */
  export type SubscribeUpdateManyArgs = {
    data: SubscribeUpdateManyMutationInput
    where?: SubscribeWhereInput
  }


  /**
   * Subscribe upsert
   */
  export type SubscribeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * The filter to search for the Subscribe to update in case it exists.
    **/
    where: SubscribeWhereUniqueInput
    /**
     * In case the Subscribe found by the `where` argument doesn't exist, create a new Subscribe with this data.
    **/
    create: SubscribeCreateInput
    /**
     * In case the Subscribe was found with the provided `where` argument, update it with this data.
    **/
    update: SubscribeUpdateInput
  }


  /**
   * Subscribe delete
   */
  export type SubscribeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
    /**
     * Filter which Subscribe to delete.
    **/
    where: SubscribeWhereUniqueInput
  }


  /**
   * Subscribe deleteMany
   */
  export type SubscribeDeleteManyArgs = {
    where?: SubscribeWhereInput
  }


  /**
   * Subscribe without action
   */
  export type SubscribeArgs = {
    /**
     * Select specific fields to fetch from the Subscribe
    **/
    select?: SubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubscribeInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    count: number | null
    avg: AccountAvgAggregateOutputType | null
    sum: AccountSumAggregateOutputType | null
    min: AccountMinAggregateOutputType | null
    max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type AccountSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type AccountMinAggregateOutputType = {
    id: number
    compoundId: string | null
    userId: number
    providerType: string | null
    providerId: string | null
    providerAccountId: string | null
    refreshToken: string | null
    accessToken: string | null
    accessTokenExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number
    compoundId: string | null
    userId: number
    providerType: string | null
    providerId: string | null
    providerAccountId: string | null
    refreshToken: string | null
    accessToken: string | null
    accessTokenExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    compoundId: number | null
    userId: number
    providerType: number | null
    providerId: number | null
    providerAccountId: number | null
    refreshToken: number | null
    accessToken: number | null
    accessTokenExpires: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    compoundId?: true
    userId?: true
    providerType?: true
    providerId?: true
    providerAccountId?: true
    refreshToken?: true
    accessToken?: true
    accessTokenExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    compoundId?: true
    userId?: true
    providerType?: true
    providerId?: true
    providerAccountId?: true
    refreshToken?: true
    accessToken?: true
    accessTokenExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    compoundId?: true
    userId?: true
    providerType?: true
    providerId?: true
    providerAccountId?: true
    refreshToken?: true
    accessToken?: true
    accessTokenExpires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateAccountArgs = {
    /**
     * Filter which Account to aggregate.
    **/
    where?: AccountWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Accounts to fetch.
    **/
    orderBy?: Enumerable<AccountOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AggregateAccountArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetAccountAggregateScalarType<T[P]>
  }

  export type GetAccountAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof AccountAvgAggregateOutputType ? AccountAvgAggregateOutputType[P] : never
  }

    



  export type AccountSelect = {
    id?: boolean
    compoundId?: boolean
    userId?: boolean
    providerType?: boolean
    providerId?: boolean
    providerAccountId?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    accessTokenExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | FindManyAccountArgs
    ?'include' extends U
    ? Account 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Account ?Account [P]
  : 
     never
  } 
    : Account
  : Account


  export interface AccountDelegate {
    /**
     * Find zero or one Account that matches the filter.
     * @param {FindUniqueAccountArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAccountArgs>(
      args: Subset<T, FindUniqueAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>

    /**
     * Find the first Account that matches the filter.
     * @param {FindFirstAccountArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAccountArgs>(
      args?: Subset<T, FindFirstAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>

    /**
     * Find zero or more Accounts that matches the filter.
     * @param {FindManyAccountArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAccountArgs>(
      args?: Subset<T, FindManyAccountArgs>
    ): CheckSelect<T, Promise<Array<Account>>, Promise<Array<AccountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: Subset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: Subset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: Subset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: Subset<T, AccountDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: Subset<T, AccountUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: Subset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Find zero or one Account that matches the filter.
     * @param {FindUniqueAccountArgs} args - Arguments to find a Account
     * @deprecated This will be deprecated please use prisma.account.findUnique
     * @example
     * // Get one Account
     * const account = await prisma.account.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAccountArgs>(
      args: Subset<T, FindUniqueAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>

    /**
     * Count the number of Accounts.
     * @param {FindManyAccountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyAccountArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Account.
     * @param {AggregateAccountArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateAccountArgs>(args: Subset<T, AggregateAccountArgs>): Promise<GetAccountAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type FindUniqueAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Account to fetch.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type FindFirstAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Account to fetch.
    **/
    where?: AccountWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Accounts to fetch.
    **/
    orderBy?: Enumerable<AccountOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Accounts.
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type FindManyAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Accounts to fetch.
    **/
    where?: AccountWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Accounts to fetch.
    **/
    orderBy?: Enumerable<AccountOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * The data needed to create a Account.
    **/
    data: AccountCreateInput
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * The data needed to update a Account.
    **/
    data: AccountUpdateInput
    /**
     * Choose, which Account to update.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    data: AccountUpdateManyMutationInput
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * The filter to search for the Account to update in case it exists.
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
    **/
    create: AccountCreateInput
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
    **/
    update: AccountUpdateInput
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Filter which Account to delete.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    count: number | null
    avg: SessionAvgAggregateOutputType | null
    sum: SessionSumAggregateOutputType | null
    min: SessionMinAggregateOutputType | null
    max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type SessionSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type SessionMinAggregateOutputType = {
    id: number
    userId: number
    expires: Date | null
    sessionToken: string | null
    accessToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number
    userId: number
    expires: Date | null
    sessionToken: string | null
    accessToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    expires: number | null
    sessionToken: number | null
    accessToken: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    expires?: true
    sessionToken?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    expires?: true
    sessionToken?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    expires?: true
    sessionToken?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateSessionArgs = {
    /**
     * Filter which Session to aggregate.
    **/
    where?: SessionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Sessions to fetch.
    **/
    orderBy?: Enumerable<SessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends AggregateSessionArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSessionAggregateScalarType<T[P]>
  }

  export type GetSessionAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof SessionAvgAggregateOutputType ? SessionAvgAggregateOutputType[P] : never
  }

    



  export type SessionSelect = {
    id?: boolean
    userId?: boolean
    expires?: boolean
    sessionToken?: boolean
    accessToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | FindManySessionArgs
    ?'include' extends U
    ? Session 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Session ?Session [P]
  : 
     never
  } 
    : Session
  : Session


  export interface SessionDelegate {
    /**
     * Find zero or one Session that matches the filter.
     * @param {FindUniqueSessionArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueSessionArgs>(
      args: Subset<T, FindUniqueSessionArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session | null>, Prisma__SessionClient<SessionGetPayload<T> | null>>

    /**
     * Find the first Session that matches the filter.
     * @param {FindFirstSessionArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstSessionArgs>(
      args?: Subset<T, FindFirstSessionArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session | null>, Prisma__SessionClient<SessionGetPayload<T> | null>>

    /**
     * Find zero or more Sessions that matches the filter.
     * @param {FindManySessionArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManySessionArgs>(
      args?: Subset<T, FindManySessionArgs>
    ): CheckSelect<T, Promise<Array<Session>>, Promise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: Subset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: Subset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: Subset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: Subset<T, SessionDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: Subset<T, SessionUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: Subset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find zero or one Session that matches the filter.
     * @param {FindUniqueSessionArgs} args - Arguments to find a Session
     * @deprecated This will be deprecated please use prisma.session.findUnique
     * @example
     * // Get one Session
     * const session = await prisma.session.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueSessionArgs>(
      args: Subset<T, FindUniqueSessionArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session | null>, Prisma__SessionClient<SessionGetPayload<T> | null>>

    /**
     * Count the number of Sessions.
     * @param {FindManySessionArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManySessionArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Session.
     * @param {AggregateSessionArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateSessionArgs>(args: Subset<T, AggregateSessionArgs>): Promise<GetSessionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type FindUniqueSessionArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type FindFirstSessionArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
    **/
    where?: SessionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Sessions to fetch.
    **/
    orderBy?: Enumerable<SessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Sessions.
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type FindManySessionArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * Filter, which Sessions to fetch.
    **/
    where?: SessionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Sessions to fetch.
    **/
    orderBy?: Enumerable<SessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * The data needed to create a Session.
    **/
    data: SessionCreateInput
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * The data needed to update a Session.
    **/
    data: SessionUpdateInput
    /**
     * Choose, which Session to update.
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    data: SessionUpdateManyMutationInput
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * The filter to search for the Session to update in case it exists.
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
    **/
    create: SessionCreateInput
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
    **/
    update: SessionUpdateInput
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
    /**
     * Filter which Session to delete.
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
    **/
    select?: SessionSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: number | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    emailVerified: number | null
    image: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateUserArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }

    



  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    leads?: boolean | FindManyLeadsArgs
    subscribed?: boolean | FindManySubscribeArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude = {
    leads?: boolean | FindManyLeadsArgs
    subscribed?: boolean | FindManySubscribeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'leads'
        ? Array < LeadsGetPayload<S['include'][P]>>  :
        P extends 'subscribed'
        ? Array < SubscribeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'leads'
        ? Array < LeadsGetPayload<S['select'][P]>>  :
        P extends 'subscribed'
        ? Array < SubscribeGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Count the number of Users.
     * @param {FindManyUserArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {AggregateUserArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    leads<T extends FindManyLeadsArgs = {}>(args?: Subset<T, FindManyLeadsArgs>): CheckSelect<T, Promise<Array<Leads>>, Promise<Array<LeadsGetPayload<T>>>>;

    subscribed<T extends FindManySubscribeArgs = {}>(args?: Subset<T, FindManySubscribeArgs>): CheckSelect<T, Promise<Array<Subscribe>>, Promise<Array<SubscribeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model VerificationRequest
   */


  export type AggregateVerificationRequest = {
    count: number | null
    avg: VerificationRequestAvgAggregateOutputType | null
    sum: VerificationRequestSumAggregateOutputType | null
    min: VerificationRequestMinAggregateOutputType | null
    max: VerificationRequestMaxAggregateOutputType | null
  }

  export type VerificationRequestAvgAggregateOutputType = {
    id: number
  }

  export type VerificationRequestSumAggregateOutputType = {
    id: number
  }

  export type VerificationRequestMinAggregateOutputType = {
    id: number
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationRequestMaxAggregateOutputType = {
    id: number
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationRequestCountAggregateOutputType = {
    id: number
    identifier: number | null
    token: number | null
    expires: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type VerificationRequestAvgAggregateInputType = {
    id?: true
  }

  export type VerificationRequestSumAggregateInputType = {
    id?: true
  }

  export type VerificationRequestMinAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationRequestMaxAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationRequestCountAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateVerificationRequestArgs = {
    /**
     * Filter which VerificationRequest to aggregate.
    **/
    where?: VerificationRequestWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of VerificationRequests to fetch.
    **/
    orderBy?: Enumerable<VerificationRequestOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: VerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationRequests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationRequests.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationRequests
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: VerificationRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: VerificationRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: VerificationRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: VerificationRequestMaxAggregateInputType
  }

  export type GetVerificationRequestAggregateType<T extends AggregateVerificationRequestArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetVerificationRequestAggregateScalarType<T[P]>
  }

  export type GetVerificationRequestAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof VerificationRequestAvgAggregateOutputType ? VerificationRequestAvgAggregateOutputType[P] : never
  }

    



  export type VerificationRequestSelect = {
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationRequestGetPayload<
    S extends boolean | null | undefined | VerificationRequestArgs,
    U = keyof S
      > = S extends true
        ? VerificationRequest
    : S extends undefined
    ? never
    : S extends VerificationRequestArgs | FindManyVerificationRequestArgs
    ?'include' extends U
    ? VerificationRequest 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof VerificationRequest ?VerificationRequest [P]
  : 
     never
  } 
    : VerificationRequest
  : VerificationRequest


  export interface VerificationRequestDelegate {
    /**
     * Find zero or one VerificationRequest that matches the filter.
     * @param {FindUniqueVerificationRequestArgs} args - Arguments to find a VerificationRequest
     * @example
     * // Get one VerificationRequest
     * const verificationRequest = await prisma.verificationRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueVerificationRequestArgs>(
      args: Subset<T, FindUniqueVerificationRequestArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest | null>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T> | null>>

    /**
     * Find the first VerificationRequest that matches the filter.
     * @param {FindFirstVerificationRequestArgs} args - Arguments to find a VerificationRequest
     * @example
     * // Get one VerificationRequest
     * const verificationRequest = await prisma.verificationRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstVerificationRequestArgs>(
      args?: Subset<T, FindFirstVerificationRequestArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest | null>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T> | null>>

    /**
     * Find zero or more VerificationRequests that matches the filter.
     * @param {FindManyVerificationRequestArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationRequests
     * const verificationRequests = await prisma.verificationRequest.findMany()
     * 
     * // Get first 10 VerificationRequests
     * const verificationRequests = await prisma.verificationRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationRequestWithIdOnly = await prisma.verificationRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyVerificationRequestArgs>(
      args?: Subset<T, FindManyVerificationRequestArgs>
    ): CheckSelect<T, Promise<Array<VerificationRequest>>, Promise<Array<VerificationRequestGetPayload<T>>>>

    /**
     * Create a VerificationRequest.
     * @param {VerificationRequestCreateArgs} args - Arguments to create a VerificationRequest.
     * @example
     * // Create one VerificationRequest
     * const VerificationRequest = await prisma.verificationRequest.create({
     *   data: {
     *     // ... data to create a VerificationRequest
     *   }
     * })
     * 
    **/
    create<T extends VerificationRequestCreateArgs>(
      args: Subset<T, VerificationRequestCreateArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>

    /**
     * Delete a VerificationRequest.
     * @param {VerificationRequestDeleteArgs} args - Arguments to delete one VerificationRequest.
     * @example
     * // Delete one VerificationRequest
     * const VerificationRequest = await prisma.verificationRequest.delete({
     *   where: {
     *     // ... filter to delete one VerificationRequest
     *   }
     * })
     * 
    **/
    delete<T extends VerificationRequestDeleteArgs>(
      args: Subset<T, VerificationRequestDeleteArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>

    /**
     * Update one VerificationRequest.
     * @param {VerificationRequestUpdateArgs} args - Arguments to update one VerificationRequest.
     * @example
     * // Update one VerificationRequest
     * const verificationRequest = await prisma.verificationRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationRequestUpdateArgs>(
      args: Subset<T, VerificationRequestUpdateArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>

    /**
     * Delete zero or more VerificationRequests.
     * @param {VerificationRequestDeleteManyArgs} args - Arguments to filter VerificationRequests to delete.
     * @example
     * // Delete a few VerificationRequests
     * const { count } = await prisma.verificationRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationRequestDeleteManyArgs>(
      args?: Subset<T, VerificationRequestDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more VerificationRequests.
     * @param {VerificationRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationRequests
     * const verificationRequest = await prisma.verificationRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationRequestUpdateManyArgs>(
      args: Subset<T, VerificationRequestUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one VerificationRequest.
     * @param {VerificationRequestUpsertArgs} args - Arguments to update or create a VerificationRequest.
     * @example
     * // Update or create a VerificationRequest
     * const verificationRequest = await prisma.verificationRequest.upsert({
     *   create: {
     *     // ... data to create a VerificationRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationRequest we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationRequestUpsertArgs>(
      args: Subset<T, VerificationRequestUpsertArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>

    /**
     * Find zero or one VerificationRequest that matches the filter.
     * @param {FindUniqueVerificationRequestArgs} args - Arguments to find a VerificationRequest
     * @deprecated This will be deprecated please use prisma.verificationRequest.findUnique
     * @example
     * // Get one VerificationRequest
     * const verificationRequest = await prisma.verificationRequest.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueVerificationRequestArgs>(
      args: Subset<T, FindUniqueVerificationRequestArgs>
    ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest | null>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T> | null>>

    /**
     * Count the number of VerificationRequests.
     * @param {FindManyVerificationRequestArgs} args - Arguments to filter VerificationRequests to count.
     * @example
     * // Count the number of VerificationRequests
     * const count = await prisma.verificationRequest.count({
     *   where: {
     *     // ... the filter for the VerificationRequests we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyVerificationRequestArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a VerificationRequest.
     * @param {AggregateVerificationRequestArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateVerificationRequestArgs>(args: Subset<T, AggregateVerificationRequestArgs>): Promise<GetVerificationRequestAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationRequestClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * VerificationRequest findUnique
   */
  export type FindUniqueVerificationRequestArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * Filter, which VerificationRequest to fetch.
    **/
    where: VerificationRequestWhereUniqueInput
  }


  /**
   * VerificationRequest findFirst
   */
  export type FindFirstVerificationRequestArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * Filter, which VerificationRequest to fetch.
    **/
    where?: VerificationRequestWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of VerificationRequests to fetch.
    **/
    orderBy?: Enumerable<VerificationRequestOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationRequests.
    **/
    cursor?: VerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationRequests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationRequests.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of VerificationRequests.
    **/
    distinct?: Enumerable<VerificationRequestScalarFieldEnum>
  }


  /**
   * VerificationRequest findMany
   */
  export type FindManyVerificationRequestArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * Filter, which VerificationRequests to fetch.
    **/
    where?: VerificationRequestWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of VerificationRequests to fetch.
    **/
    orderBy?: Enumerable<VerificationRequestOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationRequests.
    **/
    cursor?: VerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationRequests from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationRequests.
    **/
    skip?: number
    distinct?: Enumerable<VerificationRequestScalarFieldEnum>
  }


  /**
   * VerificationRequest create
   */
  export type VerificationRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * The data needed to create a VerificationRequest.
    **/
    data: VerificationRequestCreateInput
  }


  /**
   * VerificationRequest update
   */
  export type VerificationRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * The data needed to update a VerificationRequest.
    **/
    data: VerificationRequestUpdateInput
    /**
     * Choose, which VerificationRequest to update.
    **/
    where: VerificationRequestWhereUniqueInput
  }


  /**
   * VerificationRequest updateMany
   */
  export type VerificationRequestUpdateManyArgs = {
    data: VerificationRequestUpdateManyMutationInput
    where?: VerificationRequestWhereInput
  }


  /**
   * VerificationRequest upsert
   */
  export type VerificationRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * The filter to search for the VerificationRequest to update in case it exists.
    **/
    where: VerificationRequestWhereUniqueInput
    /**
     * In case the VerificationRequest found by the `where` argument doesn't exist, create a new VerificationRequest with this data.
    **/
    create: VerificationRequestCreateInput
    /**
     * In case the VerificationRequest was found with the provided `where` argument, update it with this data.
    **/
    update: VerificationRequestUpdateInput
  }


  /**
   * VerificationRequest delete
   */
  export type VerificationRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
    /**
     * Filter which VerificationRequest to delete.
    **/
    where: VerificationRequestWhereUniqueInput
  }


  /**
   * VerificationRequest deleteMany
   */
  export type VerificationRequestDeleteManyArgs = {
    where?: VerificationRequestWhereInput
  }


  /**
   * VerificationRequest without action
   */
  export type VerificationRequestArgs = {
    /**
     * Select specific fields to fetch from the VerificationRequest
    **/
    select?: VerificationRequestSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const LeadsScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    workPhone: 'workPhone',
    jobTitle: 'jobTitle',
    organization: 'organization',
    webSite: 'webSite',
    orgSize: 'orgSize',
    industry: 'industry',
    leadSource: 'leadSource',
    content: 'content',
    userId: 'userId'
  };

  export type LeadsScalarFieldEnum = (typeof LeadsScalarFieldEnum)[keyof typeof LeadsScalarFieldEnum]


  export const SolutionScalarFieldEnum: {
    id: 'id',
    solution: 'solution',
    leadsId: 'leadsId'
  };

  export type SolutionScalarFieldEnum = (typeof SolutionScalarFieldEnum)[keyof typeof SolutionScalarFieldEnum]


  export const SubscribeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    active: 'active',
    userId: 'userId'
  };

  export type SubscribeScalarFieldEnum = (typeof SubscribeScalarFieldEnum)[keyof typeof SubscribeScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    compoundId: 'compoundId',
    userId: 'userId',
    providerType: 'providerType',
    providerId: 'providerId',
    providerAccountId: 'providerAccountId',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    accessTokenExpires: 'accessTokenExpires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    expires: 'expires',
    sessionToken: 'sessionToken',
    accessToken: 'accessToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationRequestScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationRequestScalarFieldEnum = (typeof VerificationRequestScalarFieldEnum)[keyof typeof VerificationRequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type LeadsWhereInput = {
    AND?: Enumerable<LeadsWhereInput>
    OR?: Enumerable<LeadsWhereInput>
    NOT?: Enumerable<LeadsWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    workPhone?: StringNullableFilter | string | null
    jobTitle?: StringNullableFilter | string | null
    organization?: StringNullableFilter | string | null
    webSite?: StringNullableFilter | string | null
    orgSize?: StringNullableFilter | string | null
    industry?: StringNullableFilter | string | null
    solutionType?: SolutionListRelationFilter
    leadSource?: StringNullableFilter | string | null
    content?: StringFilter | string
    User?: XOR<UserWhereInput, UserRelationFilter> | null
    userId?: IntNullableFilter | number | null
  }

  export type LeadsOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    workPhone?: SortOrder
    jobTitle?: SortOrder
    organization?: SortOrder
    webSite?: SortOrder
    orgSize?: SortOrder
    industry?: SortOrder
    leadSource?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type LeadsWhereUniqueInput = {
    id?: number
  }

  export type SolutionWhereInput = {
    AND?: Enumerable<SolutionWhereInput>
    OR?: Enumerable<SolutionWhereInput>
    NOT?: Enumerable<SolutionWhereInput>
    id?: IntFilter | number
    solution?: StringFilter | string
    Leads?: XOR<LeadsWhereInput, LeadsRelationFilter> | null
    leadsId?: IntNullableFilter | number | null
  }

  export type SolutionOrderByInput = {
    id?: SortOrder
    solution?: SortOrder
    leadsId?: SortOrder
  }

  export type SolutionWhereUniqueInput = {
    id?: number
  }

  export type SubscribeWhereInput = {
    AND?: Enumerable<SubscribeWhereInput>
    OR?: Enumerable<SubscribeWhereInput>
    NOT?: Enumerable<SubscribeWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    active?: BoolFilter | boolean
    User?: XOR<UserWhereInput, UserRelationFilter> | null
    userId?: IntNullableFilter | number | null
  }

  export type SubscribeOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    active?: SortOrder
    userId?: SortOrder
  }

  export type SubscribeWhereUniqueInput = {
    id?: number
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: IntFilter | number
    compoundId?: StringFilter | string
    userId?: IntFilter | number
    providerType?: StringFilter | string
    providerId?: StringFilter | string
    providerAccountId?: StringFilter | string
    refreshToken?: StringNullableFilter | string | null
    accessToken?: StringNullableFilter | string | null
    accessTokenExpires?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AccountOrderByInput = {
    id?: SortOrder
    compoundId?: SortOrder
    userId?: SortOrder
    providerType?: SortOrder
    providerId?: SortOrder
    providerAccountId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    accessTokenExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountWhereUniqueInput = {
    id?: number
    compoundId?: string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    expires?: DateTimeFilter | Date | string
    sessionToken?: StringFilter | string
    accessToken?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    sessionToken?: SortOrder
    accessToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: number
    sessionToken?: string
    accessToken?: string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    leads?: LeadsListRelationFilter
    subscribed?: SubscribeListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type VerificationRequestWhereInput = {
    AND?: Enumerable<VerificationRequestWhereInput>
    OR?: Enumerable<VerificationRequestWhereInput>
    NOT?: Enumerable<VerificationRequestWhereInput>
    id?: IntFilter | number
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VerificationRequestOrderByInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationRequestWhereUniqueInput = {
    id?: number
    token?: string
  }

  export type LeadsCreateInput = {
    firstName: string
    lastName: string
    email: string
    workPhone?: string | null
    jobTitle?: string | null
    organization?: string | null
    webSite?: string | null
    orgSize?: string | null
    industry?: string | null
    leadSource?: string | null
    content: string
    solutionType?: SolutionCreateManyWithoutLeadsInput
    User?: UserCreateOneWithoutLeadsInput
  }

  export type LeadsUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    webSite?: NullableStringFieldUpdateOperationsInput | string | null
    orgSize?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    solutionType?: SolutionUpdateManyWithoutLeadsInput
    User?: UserUpdateOneWithoutLeadsInput
  }

  export type LeadsUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    webSite?: NullableStringFieldUpdateOperationsInput | string | null
    orgSize?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionCreateInput = {
    solution: string
    Leads?: LeadsCreateOneWithoutSolutionTypeInput
  }

  export type SolutionUpdateInput = {
    solution?: StringFieldUpdateOperationsInput | string
    Leads?: LeadsUpdateOneWithoutSolutionTypeInput
  }

  export type SolutionUpdateManyMutationInput = {
    solution?: StringFieldUpdateOperationsInput | string
  }

  export type SubscribeCreateInput = {
    email: string
    active?: boolean
    User?: UserCreateOneWithoutSubscribedInput
  }

  export type SubscribeUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutSubscribedInput
  }

  export type SubscribeUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountCreateInput = {
    compoundId: string
    userId: number
    providerType: string
    providerId: string
    providerAccountId: string
    refreshToken?: string | null
    accessToken?: string | null
    accessTokenExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    compoundId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    providerType?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateManyMutationInput = {
    compoundId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    providerType?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    userId: number
    expires: Date | string
    sessionToken: string
    accessToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadsCreateManyWithoutUserInput
    subscribed?: SubscribeCreateManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadsUpdateManyWithoutUserInput
    subscribed?: SubscribeUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationRequestCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationRequestUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationRequestUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type SolutionListRelationFilter = {
    every?: SolutionWhereInput
    some?: SolutionWhereInput
    none?: SolutionWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type LeadsRelationFilter = {
    is?: LeadsWhereInput | null
    isNot?: LeadsWhereInput | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type LeadsListRelationFilter = {
    every?: LeadsWhereInput
    some?: LeadsWhereInput
    none?: LeadsWhereInput
  }

  export type SubscribeListRelationFilter = {
    every?: SubscribeWhereInput
    some?: SubscribeWhereInput
    none?: SubscribeWhereInput
  }

  export type SolutionCreateManyWithoutLeadsInput = {
    create?: Enumerable<SolutionCreateWithoutLeadsInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutLeadsInput>
  }

  export type UserCreateOneWithoutLeadsInput = {
    create?: UserCreateWithoutLeadsInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutleadsInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SolutionUpdateManyWithoutLeadsInput = {
    create?: Enumerable<SolutionCreateWithoutLeadsInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    set?: Enumerable<SolutionWhereUniqueInput>
    disconnect?: Enumerable<SolutionWhereUniqueInput>
    delete?: Enumerable<SolutionWhereUniqueInput>
    update?: Enumerable<SolutionUpdateWithWhereUniqueWithoutLeadsInput>
    updateMany?: Enumerable<SolutionUpdateManyWithWhereWithoutLeadsInput>
    deleteMany?: Enumerable<SolutionScalarWhereInput>
    upsert?: Enumerable<SolutionUpsertWithWhereUniqueWithoutLeadsInput>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutLeadsInput>
  }

  export type UserUpdateOneWithoutLeadsInput = {
    create?: UserCreateWithoutLeadsInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: UserUpdateWithoutLeadsInput
    upsert?: UserUpsertWithoutLeadsInput
    connectOrCreate?: UserCreateOrConnectWithoutleadsInput
  }

  export type LeadsCreateOneWithoutSolutionTypeInput = {
    create?: LeadsCreateWithoutSolutionTypeInput
    connect?: LeadsWhereUniqueInput
    connectOrCreate?: LeadsCreateOrConnectWithoutsolutionTypeInput
  }

  export type LeadsUpdateOneWithoutSolutionTypeInput = {
    create?: LeadsCreateWithoutSolutionTypeInput
    connect?: LeadsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: LeadsUpdateWithoutSolutionTypeInput
    upsert?: LeadsUpsertWithoutSolutionTypeInput
    connectOrCreate?: LeadsCreateOrConnectWithoutsolutionTypeInput
  }

  export type UserCreateOneWithoutSubscribedInput = {
    create?: UserCreateWithoutSubscribedInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutsubscribedInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutSubscribedInput = {
    create?: UserCreateWithoutSubscribedInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: UserUpdateWithoutSubscribedInput
    upsert?: UserUpsertWithoutSubscribedInput
    connectOrCreate?: UserCreateOrConnectWithoutsubscribedInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LeadsCreateManyWithoutUserInput = {
    create?: Enumerable<LeadsCreateWithoutUserInput>
    connect?: Enumerable<LeadsWhereUniqueInput>
    connectOrCreate?: Enumerable<LeadsCreateOrConnectWithoutUserInput>
  }

  export type SubscribeCreateManyWithoutUserInput = {
    create?: Enumerable<SubscribeCreateWithoutUserInput>
    connect?: Enumerable<SubscribeWhereUniqueInput>
    connectOrCreate?: Enumerable<SubscribeCreateOrConnectWithoutUserInput>
  }

  export type LeadsUpdateManyWithoutUserInput = {
    create?: Enumerable<LeadsCreateWithoutUserInput>
    connect?: Enumerable<LeadsWhereUniqueInput>
    set?: Enumerable<LeadsWhereUniqueInput>
    disconnect?: Enumerable<LeadsWhereUniqueInput>
    delete?: Enumerable<LeadsWhereUniqueInput>
    update?: Enumerable<LeadsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LeadsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LeadsScalarWhereInput>
    upsert?: Enumerable<LeadsUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<LeadsCreateOrConnectWithoutUserInput>
  }

  export type SubscribeUpdateManyWithoutUserInput = {
    create?: Enumerable<SubscribeCreateWithoutUserInput>
    connect?: Enumerable<SubscribeWhereUniqueInput>
    set?: Enumerable<SubscribeWhereUniqueInput>
    disconnect?: Enumerable<SubscribeWhereUniqueInput>
    delete?: Enumerable<SubscribeWhereUniqueInput>
    update?: Enumerable<SubscribeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SubscribeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SubscribeScalarWhereInput>
    upsert?: Enumerable<SubscribeUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<SubscribeCreateOrConnectWithoutUserInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SolutionCreateWithoutLeadsInput = {
    solution: string
  }

  export type SolutionCreateOrConnectWithoutLeadsInput = {
    where: SolutionWhereUniqueInput
    create: SolutionCreateWithoutLeadsInput
  }

  export type UserCreateWithoutLeadsInput = {
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscribed?: SubscribeCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutleadsInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutLeadsInput
  }

  export type SolutionUpdateWithWhereUniqueWithoutLeadsInput = {
    where: SolutionWhereUniqueInput
    data: SolutionUpdateWithoutLeadsInput
  }

  export type SolutionUpdateManyWithWhereWithoutLeadsInput = {
    where: SolutionScalarWhereInput
    data: SolutionUpdateManyMutationInput
  }

  export type SolutionScalarWhereInput = {
    AND?: Enumerable<SolutionScalarWhereInput>
    OR?: Enumerable<SolutionScalarWhereInput>
    NOT?: Enumerable<SolutionScalarWhereInput>
    id?: IntFilter | number
    solution?: StringFilter | string
    leadsId?: IntNullableFilter | number | null
  }

  export type SolutionUpsertWithWhereUniqueWithoutLeadsInput = {
    where: SolutionWhereUniqueInput
    update: SolutionUpdateWithoutLeadsInput
    create: SolutionCreateWithoutLeadsInput
  }

  export type UserUpdateWithoutLeadsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed?: SubscribeUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutLeadsInput = {
    update: UserUpdateWithoutLeadsInput
    create: UserCreateWithoutLeadsInput
  }

  export type LeadsCreateWithoutSolutionTypeInput = {
    firstName: string
    lastName: string
    email: string
    workPhone?: string | null
    jobTitle?: string | null
    organization?: string | null
    webSite?: string | null
    orgSize?: string | null
    industry?: string | null
    leadSource?: string | null
    content: string
    User?: UserCreateOneWithoutLeadsInput
  }

  export type LeadsCreateOrConnectWithoutsolutionTypeInput = {
    where: LeadsWhereUniqueInput
    create: LeadsCreateWithoutSolutionTypeInput
  }

  export type LeadsUpdateWithoutSolutionTypeInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    webSite?: NullableStringFieldUpdateOperationsInput | string | null
    orgSize?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutLeadsInput
  }

  export type LeadsUpsertWithoutSolutionTypeInput = {
    update: LeadsUpdateWithoutSolutionTypeInput
    create: LeadsCreateWithoutSolutionTypeInput
  }

  export type UserCreateWithoutSubscribedInput = {
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leads?: LeadsCreateManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutsubscribedInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutSubscribedInput
  }

  export type UserUpdateWithoutSubscribedInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leads?: LeadsUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutSubscribedInput = {
    update: UserUpdateWithoutSubscribedInput
    create: UserCreateWithoutSubscribedInput
  }

  export type LeadsCreateWithoutUserInput = {
    firstName: string
    lastName: string
    email: string
    workPhone?: string | null
    jobTitle?: string | null
    organization?: string | null
    webSite?: string | null
    orgSize?: string | null
    industry?: string | null
    leadSource?: string | null
    content: string
    solutionType?: SolutionCreateManyWithoutLeadsInput
  }

  export type LeadsCreateOrConnectWithoutUserInput = {
    where: LeadsWhereUniqueInput
    create: LeadsCreateWithoutUserInput
  }

  export type SubscribeCreateWithoutUserInput = {
    email: string
    active?: boolean
  }

  export type SubscribeCreateOrConnectWithoutUserInput = {
    where: SubscribeWhereUniqueInput
    create: SubscribeCreateWithoutUserInput
  }

  export type LeadsUpdateWithWhereUniqueWithoutUserInput = {
    where: LeadsWhereUniqueInput
    data: LeadsUpdateWithoutUserInput
  }

  export type LeadsUpdateManyWithWhereWithoutUserInput = {
    where: LeadsScalarWhereInput
    data: LeadsUpdateManyMutationInput
  }

  export type LeadsScalarWhereInput = {
    AND?: Enumerable<LeadsScalarWhereInput>
    OR?: Enumerable<LeadsScalarWhereInput>
    NOT?: Enumerable<LeadsScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    workPhone?: StringNullableFilter | string | null
    jobTitle?: StringNullableFilter | string | null
    organization?: StringNullableFilter | string | null
    webSite?: StringNullableFilter | string | null
    orgSize?: StringNullableFilter | string | null
    industry?: StringNullableFilter | string | null
    leadSource?: StringNullableFilter | string | null
    content?: StringFilter | string
    userId?: IntNullableFilter | number | null
  }

  export type LeadsUpsertWithWhereUniqueWithoutUserInput = {
    where: LeadsWhereUniqueInput
    update: LeadsUpdateWithoutUserInput
    create: LeadsCreateWithoutUserInput
  }

  export type SubscribeUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscribeWhereUniqueInput
    data: SubscribeUpdateWithoutUserInput
  }

  export type SubscribeUpdateManyWithWhereWithoutUserInput = {
    where: SubscribeScalarWhereInput
    data: SubscribeUpdateManyMutationInput
  }

  export type SubscribeScalarWhereInput = {
    AND?: Enumerable<SubscribeScalarWhereInput>
    OR?: Enumerable<SubscribeScalarWhereInput>
    NOT?: Enumerable<SubscribeScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    active?: BoolFilter | boolean
    userId?: IntNullableFilter | number | null
  }

  export type SubscribeUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscribeWhereUniqueInput
    update: SubscribeUpdateWithoutUserInput
    create: SubscribeCreateWithoutUserInput
  }

  export type SolutionUpdateWithoutLeadsInput = {
    solution?: StringFieldUpdateOperationsInput | string
  }

  export type LeadsUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    webSite?: NullableStringFieldUpdateOperationsInput | string | null
    orgSize?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    solutionType?: SolutionUpdateManyWithoutLeadsInput
  }

  export type SubscribeUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.LeadsScalarFieldEnum`
 */
export type LeadsScalarFieldEnum = Prisma.LeadsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SolutionScalarFieldEnum`
 */
export type SolutionScalarFieldEnum = Prisma.SolutionScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SubscribeScalarFieldEnum`
 */
export type SubscribeScalarFieldEnum = Prisma.SubscribeScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.AccountScalarFieldEnum`
 */
export type AccountScalarFieldEnum = Prisma.AccountScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SessionScalarFieldEnum`
 */
export type SessionScalarFieldEnum = Prisma.SessionScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.UserScalarFieldEnum`
 */
export type UserScalarFieldEnum = Prisma.UserScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.VerificationRequestScalarFieldEnum`
 */
export type VerificationRequestScalarFieldEnum = Prisma.VerificationRequestScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateLeads`
 */
export type AggregateLeads = Prisma.AggregateLeads

/**
 * @deprecated Renamed to `Prisma.LeadsAvgAggregateOutputType`
 */
export type LeadsAvgAggregateOutputType = Prisma.LeadsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LeadsSumAggregateOutputType`
 */
export type LeadsSumAggregateOutputType = Prisma.LeadsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LeadsMinAggregateOutputType`
 */
export type LeadsMinAggregateOutputType = Prisma.LeadsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LeadsMaxAggregateOutputType`
 */
export type LeadsMaxAggregateOutputType = Prisma.LeadsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LeadsCountAggregateOutputType`
 */
export type LeadsCountAggregateOutputType = Prisma.LeadsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateLeadsArgs`
 */
export type AggregateLeadsArgs = Prisma.AggregateLeadsArgs

/**
 * @deprecated Renamed to `Prisma.LeadsAvgAggregateInputType`
 */
export type LeadsAvgAggregateInputType = Prisma.LeadsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LeadsSumAggregateInputType`
 */
export type LeadsSumAggregateInputType = Prisma.LeadsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LeadsMinAggregateInputType`
 */
export type LeadsMinAggregateInputType = Prisma.LeadsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LeadsMaxAggregateInputType`
 */
export type LeadsMaxAggregateInputType = Prisma.LeadsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LeadsCountAggregateInputType`
 */
export type LeadsCountAggregateInputType = Prisma.LeadsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LeadsSelect`
 */
export type LeadsSelect = Prisma.LeadsSelect

/**
 * @deprecated Renamed to `Prisma.LeadsInclude`
 */
export type LeadsInclude = Prisma.LeadsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueLeadsArgs`
 */
export type FindUniqueLeadsArgs = Prisma.FindUniqueLeadsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstLeadsArgs`
 */
export type FindFirstLeadsArgs = Prisma.FindFirstLeadsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyLeadsArgs`
 */
export type FindManyLeadsArgs = Prisma.FindManyLeadsArgs

/**
 * @deprecated Renamed to `Prisma.LeadsCreateArgs`
 */
export type LeadsCreateArgs = Prisma.LeadsCreateArgs

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateArgs`
 */
export type LeadsUpdateArgs = Prisma.LeadsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateManyArgs`
 */
export type LeadsUpdateManyArgs = Prisma.LeadsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.LeadsUpsertArgs`
 */
export type LeadsUpsertArgs = Prisma.LeadsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.LeadsDeleteArgs`
 */
export type LeadsDeleteArgs = Prisma.LeadsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.LeadsDeleteManyArgs`
 */
export type LeadsDeleteManyArgs = Prisma.LeadsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSolution`
 */
export type AggregateSolution = Prisma.AggregateSolution

/**
 * @deprecated Renamed to `Prisma.SolutionAvgAggregateOutputType`
 */
export type SolutionAvgAggregateOutputType = Prisma.SolutionAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SolutionSumAggregateOutputType`
 */
export type SolutionSumAggregateOutputType = Prisma.SolutionSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SolutionMinAggregateOutputType`
 */
export type SolutionMinAggregateOutputType = Prisma.SolutionMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SolutionMaxAggregateOutputType`
 */
export type SolutionMaxAggregateOutputType = Prisma.SolutionMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SolutionCountAggregateOutputType`
 */
export type SolutionCountAggregateOutputType = Prisma.SolutionCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSolutionArgs`
 */
export type AggregateSolutionArgs = Prisma.AggregateSolutionArgs

/**
 * @deprecated Renamed to `Prisma.SolutionAvgAggregateInputType`
 */
export type SolutionAvgAggregateInputType = Prisma.SolutionAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SolutionSumAggregateInputType`
 */
export type SolutionSumAggregateInputType = Prisma.SolutionSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SolutionMinAggregateInputType`
 */
export type SolutionMinAggregateInputType = Prisma.SolutionMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SolutionMaxAggregateInputType`
 */
export type SolutionMaxAggregateInputType = Prisma.SolutionMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SolutionCountAggregateInputType`
 */
export type SolutionCountAggregateInputType = Prisma.SolutionCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SolutionSelect`
 */
export type SolutionSelect = Prisma.SolutionSelect

/**
 * @deprecated Renamed to `Prisma.SolutionInclude`
 */
export type SolutionInclude = Prisma.SolutionInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueSolutionArgs`
 */
export type FindUniqueSolutionArgs = Prisma.FindUniqueSolutionArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstSolutionArgs`
 */
export type FindFirstSolutionArgs = Prisma.FindFirstSolutionArgs

/**
 * @deprecated Renamed to `Prisma.FindManySolutionArgs`
 */
export type FindManySolutionArgs = Prisma.FindManySolutionArgs

/**
 * @deprecated Renamed to `Prisma.SolutionCreateArgs`
 */
export type SolutionCreateArgs = Prisma.SolutionCreateArgs

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateArgs`
 */
export type SolutionUpdateArgs = Prisma.SolutionUpdateArgs

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateManyArgs`
 */
export type SolutionUpdateManyArgs = Prisma.SolutionUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.SolutionUpsertArgs`
 */
export type SolutionUpsertArgs = Prisma.SolutionUpsertArgs

/**
 * @deprecated Renamed to `Prisma.SolutionDeleteArgs`
 */
export type SolutionDeleteArgs = Prisma.SolutionDeleteArgs

/**
 * @deprecated Renamed to `Prisma.SolutionDeleteManyArgs`
 */
export type SolutionDeleteManyArgs = Prisma.SolutionDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSubscribe`
 */
export type AggregateSubscribe = Prisma.AggregateSubscribe

/**
 * @deprecated Renamed to `Prisma.SubscribeAvgAggregateOutputType`
 */
export type SubscribeAvgAggregateOutputType = Prisma.SubscribeAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubscribeSumAggregateOutputType`
 */
export type SubscribeSumAggregateOutputType = Prisma.SubscribeSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubscribeMinAggregateOutputType`
 */
export type SubscribeMinAggregateOutputType = Prisma.SubscribeMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubscribeMaxAggregateOutputType`
 */
export type SubscribeMaxAggregateOutputType = Prisma.SubscribeMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubscribeCountAggregateOutputType`
 */
export type SubscribeCountAggregateOutputType = Prisma.SubscribeCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSubscribeArgs`
 */
export type AggregateSubscribeArgs = Prisma.AggregateSubscribeArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeAvgAggregateInputType`
 */
export type SubscribeAvgAggregateInputType = Prisma.SubscribeAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubscribeSumAggregateInputType`
 */
export type SubscribeSumAggregateInputType = Prisma.SubscribeSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubscribeMinAggregateInputType`
 */
export type SubscribeMinAggregateInputType = Prisma.SubscribeMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubscribeMaxAggregateInputType`
 */
export type SubscribeMaxAggregateInputType = Prisma.SubscribeMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubscribeCountAggregateInputType`
 */
export type SubscribeCountAggregateInputType = Prisma.SubscribeCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubscribeSelect`
 */
export type SubscribeSelect = Prisma.SubscribeSelect

/**
 * @deprecated Renamed to `Prisma.SubscribeInclude`
 */
export type SubscribeInclude = Prisma.SubscribeInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueSubscribeArgs`
 */
export type FindUniqueSubscribeArgs = Prisma.FindUniqueSubscribeArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstSubscribeArgs`
 */
export type FindFirstSubscribeArgs = Prisma.FindFirstSubscribeArgs

/**
 * @deprecated Renamed to `Prisma.FindManySubscribeArgs`
 */
export type FindManySubscribeArgs = Prisma.FindManySubscribeArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeCreateArgs`
 */
export type SubscribeCreateArgs = Prisma.SubscribeCreateArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateArgs`
 */
export type SubscribeUpdateArgs = Prisma.SubscribeUpdateArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateManyArgs`
 */
export type SubscribeUpdateManyArgs = Prisma.SubscribeUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeUpsertArgs`
 */
export type SubscribeUpsertArgs = Prisma.SubscribeUpsertArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeDeleteArgs`
 */
export type SubscribeDeleteArgs = Prisma.SubscribeDeleteArgs

/**
 * @deprecated Renamed to `Prisma.SubscribeDeleteManyArgs`
 */
export type SubscribeDeleteManyArgs = Prisma.SubscribeDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateAccount`
 */
export type AggregateAccount = Prisma.AggregateAccount

/**
 * @deprecated Renamed to `Prisma.AccountAvgAggregateOutputType`
 */
export type AccountAvgAggregateOutputType = Prisma.AccountAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountSumAggregateOutputType`
 */
export type AccountSumAggregateOutputType = Prisma.AccountSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountMinAggregateOutputType`
 */
export type AccountMinAggregateOutputType = Prisma.AccountMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountMaxAggregateOutputType`
 */
export type AccountMaxAggregateOutputType = Prisma.AccountMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountCountAggregateOutputType`
 */
export type AccountCountAggregateOutputType = Prisma.AccountCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateAccountArgs`
 */
export type AggregateAccountArgs = Prisma.AggregateAccountArgs

/**
 * @deprecated Renamed to `Prisma.AccountAvgAggregateInputType`
 */
export type AccountAvgAggregateInputType = Prisma.AccountAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountSumAggregateInputType`
 */
export type AccountSumAggregateInputType = Prisma.AccountSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountMinAggregateInputType`
 */
export type AccountMinAggregateInputType = Prisma.AccountMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountMaxAggregateInputType`
 */
export type AccountMaxAggregateInputType = Prisma.AccountMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountCountAggregateInputType`
 */
export type AccountCountAggregateInputType = Prisma.AccountCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountSelect`
 */
export type AccountSelect = Prisma.AccountSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueAccountArgs`
 */
export type FindUniqueAccountArgs = Prisma.FindUniqueAccountArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstAccountArgs`
 */
export type FindFirstAccountArgs = Prisma.FindFirstAccountArgs

/**
 * @deprecated Renamed to `Prisma.FindManyAccountArgs`
 */
export type FindManyAccountArgs = Prisma.FindManyAccountArgs

/**
 * @deprecated Renamed to `Prisma.AccountCreateArgs`
 */
export type AccountCreateArgs = Prisma.AccountCreateArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpdateArgs`
 */
export type AccountUpdateArgs = Prisma.AccountUpdateArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyArgs`
 */
export type AccountUpdateManyArgs = Prisma.AccountUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpsertArgs`
 */
export type AccountUpsertArgs = Prisma.AccountUpsertArgs

/**
 * @deprecated Renamed to `Prisma.AccountDeleteArgs`
 */
export type AccountDeleteArgs = Prisma.AccountDeleteArgs

/**
 * @deprecated Renamed to `Prisma.AccountDeleteManyArgs`
 */
export type AccountDeleteManyArgs = Prisma.AccountDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSession`
 */
export type AggregateSession = Prisma.AggregateSession

/**
 * @deprecated Renamed to `Prisma.SessionAvgAggregateOutputType`
 */
export type SessionAvgAggregateOutputType = Prisma.SessionAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SessionSumAggregateOutputType`
 */
export type SessionSumAggregateOutputType = Prisma.SessionSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SessionMinAggregateOutputType`
 */
export type SessionMinAggregateOutputType = Prisma.SessionMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SessionMaxAggregateOutputType`
 */
export type SessionMaxAggregateOutputType = Prisma.SessionMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SessionCountAggregateOutputType`
 */
export type SessionCountAggregateOutputType = Prisma.SessionCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSessionArgs`
 */
export type AggregateSessionArgs = Prisma.AggregateSessionArgs

/**
 * @deprecated Renamed to `Prisma.SessionAvgAggregateInputType`
 */
export type SessionAvgAggregateInputType = Prisma.SessionAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SessionSumAggregateInputType`
 */
export type SessionSumAggregateInputType = Prisma.SessionSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SessionMinAggregateInputType`
 */
export type SessionMinAggregateInputType = Prisma.SessionMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SessionMaxAggregateInputType`
 */
export type SessionMaxAggregateInputType = Prisma.SessionMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SessionCountAggregateInputType`
 */
export type SessionCountAggregateInputType = Prisma.SessionCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SessionSelect`
 */
export type SessionSelect = Prisma.SessionSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueSessionArgs`
 */
export type FindUniqueSessionArgs = Prisma.FindUniqueSessionArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstSessionArgs`
 */
export type FindFirstSessionArgs = Prisma.FindFirstSessionArgs

/**
 * @deprecated Renamed to `Prisma.FindManySessionArgs`
 */
export type FindManySessionArgs = Prisma.FindManySessionArgs

/**
 * @deprecated Renamed to `Prisma.SessionCreateArgs`
 */
export type SessionCreateArgs = Prisma.SessionCreateArgs

/**
 * @deprecated Renamed to `Prisma.SessionUpdateArgs`
 */
export type SessionUpdateArgs = Prisma.SessionUpdateArgs

/**
 * @deprecated Renamed to `Prisma.SessionUpdateManyArgs`
 */
export type SessionUpdateManyArgs = Prisma.SessionUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.SessionUpsertArgs`
 */
export type SessionUpsertArgs = Prisma.SessionUpsertArgs

/**
 * @deprecated Renamed to `Prisma.SessionDeleteArgs`
 */
export type SessionDeleteArgs = Prisma.SessionDeleteArgs

/**
 * @deprecated Renamed to `Prisma.SessionDeleteManyArgs`
 */
export type SessionDeleteManyArgs = Prisma.SessionDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateOutputType`
 */
export type UserCountAggregateOutputType = Prisma.UserCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateInputType`
 */
export type UserCountAggregateInputType = Prisma.UserCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateVerificationRequest`
 */
export type AggregateVerificationRequest = Prisma.AggregateVerificationRequest

/**
 * @deprecated Renamed to `Prisma.VerificationRequestAvgAggregateOutputType`
 */
export type VerificationRequestAvgAggregateOutputType = Prisma.VerificationRequestAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestSumAggregateOutputType`
 */
export type VerificationRequestSumAggregateOutputType = Prisma.VerificationRequestSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestMinAggregateOutputType`
 */
export type VerificationRequestMinAggregateOutputType = Prisma.VerificationRequestMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestMaxAggregateOutputType`
 */
export type VerificationRequestMaxAggregateOutputType = Prisma.VerificationRequestMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestCountAggregateOutputType`
 */
export type VerificationRequestCountAggregateOutputType = Prisma.VerificationRequestCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateVerificationRequestArgs`
 */
export type AggregateVerificationRequestArgs = Prisma.AggregateVerificationRequestArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestAvgAggregateInputType`
 */
export type VerificationRequestAvgAggregateInputType = Prisma.VerificationRequestAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestSumAggregateInputType`
 */
export type VerificationRequestSumAggregateInputType = Prisma.VerificationRequestSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestMinAggregateInputType`
 */
export type VerificationRequestMinAggregateInputType = Prisma.VerificationRequestMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestMaxAggregateInputType`
 */
export type VerificationRequestMaxAggregateInputType = Prisma.VerificationRequestMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestCountAggregateInputType`
 */
export type VerificationRequestCountAggregateInputType = Prisma.VerificationRequestCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.VerificationRequestSelect`
 */
export type VerificationRequestSelect = Prisma.VerificationRequestSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueVerificationRequestArgs`
 */
export type FindUniqueVerificationRequestArgs = Prisma.FindUniqueVerificationRequestArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstVerificationRequestArgs`
 */
export type FindFirstVerificationRequestArgs = Prisma.FindFirstVerificationRequestArgs

/**
 * @deprecated Renamed to `Prisma.FindManyVerificationRequestArgs`
 */
export type FindManyVerificationRequestArgs = Prisma.FindManyVerificationRequestArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestCreateArgs`
 */
export type VerificationRequestCreateArgs = Prisma.VerificationRequestCreateArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestUpdateArgs`
 */
export type VerificationRequestUpdateArgs = Prisma.VerificationRequestUpdateArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestUpdateManyArgs`
 */
export type VerificationRequestUpdateManyArgs = Prisma.VerificationRequestUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestUpsertArgs`
 */
export type VerificationRequestUpsertArgs = Prisma.VerificationRequestUpsertArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestDeleteArgs`
 */
export type VerificationRequestDeleteArgs = Prisma.VerificationRequestDeleteArgs

/**
 * @deprecated Renamed to `Prisma.VerificationRequestDeleteManyArgs`
 */
export type VerificationRequestDeleteManyArgs = Prisma.VerificationRequestDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.LeadsWhereInput`
 */
export type LeadsWhereInput = Prisma.LeadsWhereInput

/**
 * @deprecated Renamed to `Prisma.LeadsOrderByInput`
 */
export type LeadsOrderByInput = Prisma.LeadsOrderByInput

/**
 * @deprecated Renamed to `Prisma.LeadsWhereUniqueInput`
 */
export type LeadsWhereUniqueInput = Prisma.LeadsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.SolutionWhereInput`
 */
export type SolutionWhereInput = Prisma.SolutionWhereInput

/**
 * @deprecated Renamed to `Prisma.SolutionOrderByInput`
 */
export type SolutionOrderByInput = Prisma.SolutionOrderByInput

/**
 * @deprecated Renamed to `Prisma.SolutionWhereUniqueInput`
 */
export type SolutionWhereUniqueInput = Prisma.SolutionWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.SubscribeWhereInput`
 */
export type SubscribeWhereInput = Prisma.SubscribeWhereInput

/**
 * @deprecated Renamed to `Prisma.SubscribeOrderByInput`
 */
export type SubscribeOrderByInput = Prisma.SubscribeOrderByInput

/**
 * @deprecated Renamed to `Prisma.SubscribeWhereUniqueInput`
 */
export type SubscribeWhereUniqueInput = Prisma.SubscribeWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.AccountWhereInput`
 */
export type AccountWhereInput = Prisma.AccountWhereInput

/**
 * @deprecated Renamed to `Prisma.AccountOrderByInput`
 */
export type AccountOrderByInput = Prisma.AccountOrderByInput

/**
 * @deprecated Renamed to `Prisma.AccountWhereUniqueInput`
 */
export type AccountWhereUniqueInput = Prisma.AccountWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.SessionWhereInput`
 */
export type SessionWhereInput = Prisma.SessionWhereInput

/**
 * @deprecated Renamed to `Prisma.SessionOrderByInput`
 */
export type SessionOrderByInput = Prisma.SessionOrderByInput

/**
 * @deprecated Renamed to `Prisma.SessionWhereUniqueInput`
 */
export type SessionWhereUniqueInput = Prisma.SessionWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestWhereInput`
 */
export type VerificationRequestWhereInput = Prisma.VerificationRequestWhereInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestOrderByInput`
 */
export type VerificationRequestOrderByInput = Prisma.VerificationRequestOrderByInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestWhereUniqueInput`
 */
export type VerificationRequestWhereUniqueInput = Prisma.VerificationRequestWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateInput`
 */
export type LeadsCreateInput = Prisma.LeadsCreateInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateInput`
 */
export type LeadsUpdateInput = Prisma.LeadsUpdateInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateManyMutationInput`
 */
export type LeadsUpdateManyMutationInput = Prisma.LeadsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.SolutionCreateInput`
 */
export type SolutionCreateInput = Prisma.SolutionCreateInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateInput`
 */
export type SolutionUpdateInput = Prisma.SolutionUpdateInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateManyMutationInput`
 */
export type SolutionUpdateManyMutationInput = Prisma.SolutionUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.SubscribeCreateInput`
 */
export type SubscribeCreateInput = Prisma.SubscribeCreateInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateInput`
 */
export type SubscribeUpdateInput = Prisma.SubscribeUpdateInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateManyMutationInput`
 */
export type SubscribeUpdateManyMutationInput = Prisma.SubscribeUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateInput`
 */
export type AccountCreateInput = Prisma.AccountCreateInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateInput`
 */
export type AccountUpdateInput = Prisma.AccountUpdateInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyMutationInput`
 */
export type AccountUpdateManyMutationInput = Prisma.AccountUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.SessionCreateInput`
 */
export type SessionCreateInput = Prisma.SessionCreateInput

/**
 * @deprecated Renamed to `Prisma.SessionUpdateInput`
 */
export type SessionUpdateInput = Prisma.SessionUpdateInput

/**
 * @deprecated Renamed to `Prisma.SessionUpdateManyMutationInput`
 */
export type SessionUpdateManyMutationInput = Prisma.SessionUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestCreateInput`
 */
export type VerificationRequestCreateInput = Prisma.VerificationRequestCreateInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestUpdateInput`
 */
export type VerificationRequestUpdateInput = Prisma.VerificationRequestUpdateInput

/**
 * @deprecated Renamed to `Prisma.VerificationRequestUpdateManyMutationInput`
 */
export type VerificationRequestUpdateManyMutationInput = Prisma.VerificationRequestUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.SolutionListRelationFilter`
 */
export type SolutionListRelationFilter = Prisma.SolutionListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.IntNullableFilter`
 */
export type IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to `Prisma.LeadsRelationFilter`
 */
export type LeadsRelationFilter = Prisma.LeadsRelationFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeNullableFilter`
 */
export type DateTimeNullableFilter = Prisma.DateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.LeadsListRelationFilter`
 */
export type LeadsListRelationFilter = Prisma.LeadsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.SubscribeListRelationFilter`
 */
export type SubscribeListRelationFilter = Prisma.SubscribeListRelationFilter

/**
 * @deprecated Renamed to `Prisma.SolutionCreateManyWithoutLeadsInput`
 */
export type SolutionCreateManyWithoutLeadsInput = Prisma.SolutionCreateManyWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutLeadsInput`
 */
export type UserCreateOneWithoutLeadsInput = Prisma.UserCreateOneWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateManyWithoutLeadsInput`
 */
export type SolutionUpdateManyWithoutLeadsInput = Prisma.SolutionUpdateManyWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneWithoutLeadsInput`
 */
export type UserUpdateOneWithoutLeadsInput = Prisma.UserUpdateOneWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateOneWithoutSolutionTypeInput`
 */
export type LeadsCreateOneWithoutSolutionTypeInput = Prisma.LeadsCreateOneWithoutSolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateOneWithoutSolutionTypeInput`
 */
export type LeadsUpdateOneWithoutSolutionTypeInput = Prisma.LeadsUpdateOneWithoutSolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutSubscribedInput`
 */
export type UserCreateOneWithoutSubscribedInput = Prisma.UserCreateOneWithoutSubscribedInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneWithoutSubscribedInput`
 */
export type UserUpdateOneWithoutSubscribedInput = Prisma.UserUpdateOneWithoutSubscribedInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableDateTimeFieldUpdateOperationsInput`
 */
export type NullableDateTimeFieldUpdateOperationsInput = Prisma.NullableDateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateManyWithoutUserInput`
 */
export type LeadsCreateManyWithoutUserInput = Prisma.LeadsCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeCreateManyWithoutUserInput`
 */
export type SubscribeCreateManyWithoutUserInput = Prisma.SubscribeCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateManyWithoutUserInput`
 */
export type LeadsUpdateManyWithoutUserInput = Prisma.LeadsUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateManyWithoutUserInput`
 */
export type SubscribeUpdateManyWithoutUserInput = Prisma.SubscribeUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntNullableFilter`
 */
export type NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeNullableFilter`
 */
export type NestedDateTimeNullableFilter = Prisma.NestedDateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.SolutionCreateWithoutLeadsInput`
 */
export type SolutionCreateWithoutLeadsInput = Prisma.SolutionCreateWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.SolutionCreateOrConnectWithoutLeadsInput`
 */
export type SolutionCreateOrConnectWithoutLeadsInput = Prisma.SolutionCreateOrConnectWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutLeadsInput`
 */
export type UserCreateWithoutLeadsInput = Prisma.UserCreateWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutleadsInput`
 */
export type UserCreateOrConnectWithoutleadsInput = Prisma.UserCreateOrConnectWithoutleadsInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateWithWhereUniqueWithoutLeadsInput`
 */
export type SolutionUpdateWithWhereUniqueWithoutLeadsInput = Prisma.SolutionUpdateWithWhereUniqueWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateManyWithWhereWithoutLeadsInput`
 */
export type SolutionUpdateManyWithWhereWithoutLeadsInput = Prisma.SolutionUpdateManyWithWhereWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.SolutionScalarWhereInput`
 */
export type SolutionScalarWhereInput = Prisma.SolutionScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpsertWithWhereUniqueWithoutLeadsInput`
 */
export type SolutionUpsertWithWhereUniqueWithoutLeadsInput = Prisma.SolutionUpsertWithWhereUniqueWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutLeadsInput`
 */
export type UserUpdateWithoutLeadsInput = Prisma.UserUpdateWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutLeadsInput`
 */
export type UserUpsertWithoutLeadsInput = Prisma.UserUpsertWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateWithoutSolutionTypeInput`
 */
export type LeadsCreateWithoutSolutionTypeInput = Prisma.LeadsCreateWithoutSolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateOrConnectWithoutsolutionTypeInput`
 */
export type LeadsCreateOrConnectWithoutsolutionTypeInput = Prisma.LeadsCreateOrConnectWithoutsolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateWithoutSolutionTypeInput`
 */
export type LeadsUpdateWithoutSolutionTypeInput = Prisma.LeadsUpdateWithoutSolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpsertWithoutSolutionTypeInput`
 */
export type LeadsUpsertWithoutSolutionTypeInput = Prisma.LeadsUpsertWithoutSolutionTypeInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutSubscribedInput`
 */
export type UserCreateWithoutSubscribedInput = Prisma.UserCreateWithoutSubscribedInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutsubscribedInput`
 */
export type UserCreateOrConnectWithoutsubscribedInput = Prisma.UserCreateOrConnectWithoutsubscribedInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutSubscribedInput`
 */
export type UserUpdateWithoutSubscribedInput = Prisma.UserUpdateWithoutSubscribedInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutSubscribedInput`
 */
export type UserUpsertWithoutSubscribedInput = Prisma.UserUpsertWithoutSubscribedInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateWithoutUserInput`
 */
export type LeadsCreateWithoutUserInput = Prisma.LeadsCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LeadsCreateOrConnectWithoutUserInput`
 */
export type LeadsCreateOrConnectWithoutUserInput = Prisma.LeadsCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeCreateWithoutUserInput`
 */
export type SubscribeCreateWithoutUserInput = Prisma.SubscribeCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeCreateOrConnectWithoutUserInput`
 */
export type SubscribeCreateOrConnectWithoutUserInput = Prisma.SubscribeCreateOrConnectWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateWithWhereUniqueWithoutUserInput`
 */
export type LeadsUpdateWithWhereUniqueWithoutUserInput = Prisma.LeadsUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateManyWithWhereWithoutUserInput`
 */
export type LeadsUpdateManyWithWhereWithoutUserInput = Prisma.LeadsUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LeadsScalarWhereInput`
 */
export type LeadsScalarWhereInput = Prisma.LeadsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpsertWithWhereUniqueWithoutUserInput`
 */
export type LeadsUpsertWithWhereUniqueWithoutUserInput = Prisma.LeadsUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateWithWhereUniqueWithoutUserInput`
 */
export type SubscribeUpdateWithWhereUniqueWithoutUserInput = Prisma.SubscribeUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateManyWithWhereWithoutUserInput`
 */
export type SubscribeUpdateManyWithWhereWithoutUserInput = Prisma.SubscribeUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeScalarWhereInput`
 */
export type SubscribeScalarWhereInput = Prisma.SubscribeScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpsertWithWhereUniqueWithoutUserInput`
 */
export type SubscribeUpsertWithWhereUniqueWithoutUserInput = Prisma.SubscribeUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SolutionUpdateWithoutLeadsInput`
 */
export type SolutionUpdateWithoutLeadsInput = Prisma.SolutionUpdateWithoutLeadsInput

/**
 * @deprecated Renamed to `Prisma.LeadsUpdateWithoutUserInput`
 */
export type LeadsUpdateWithoutUserInput = Prisma.LeadsUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.SubscribeUpdateWithoutUserInput`
 */
export type SubscribeUpdateWithoutUserInput = Prisma.SubscribeUpdateWithoutUserInput